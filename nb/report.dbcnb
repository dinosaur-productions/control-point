cells:
  - kind: 2
    languageId: sql
    value: "\r

      -- extract powerplay state and action from LYR perspective. Action should
      probably be dynamically\r

      --CREATE OR REPLACE TYPE activity_enum AS ENUM ('No Powerplay Data',
      'Acquire', 'Reinforce', 'Undermine', 'Out of Range', 'Wait Until Next
      Cycle');\r

      \r

      WITH \r

      populated AS (\r

      \    SELECT \r

      \        sys.*,\r

      \        pp.* EXCLUDE (SystemAddress, StarSystem, StarPos, PowerplayState,
      Powers),\r

      \        COALESCE(PowerplayState, 'Unoccupied') AS PowerplayState, \r

      \        COALESCE(Powers, []) AS Powers,\r

      \        (pp.SystemAddress IS NOT NULL) AS HasPowerplayData,\r

      \    FROM db.systems_populated sys\r

      \    LEFT JOIN db.system_latest pp ON pp.SystemAddress = sys.Id64\r

      ),\r

      activities AS (\r

      \    SELECT \r

      \        Id64 AS SystemAddress,\r

      \        Name AS StarSystem,\r

      \        StarPos,\r

      \        ControllingPower,\r

      \        PowerplayState, \r

      \        EXISTS (\r

      \            SELECT 1\r

      \            FROM db.station_latest st\r

      \            WHERE st.SystemAddress = populated.Id64\r

      \            -- AND st.StationType = 'MegaShip' due to a data bug, the
      type is recorded as 'SurfaceSettlement' :(\r

      \            AND st.StationName IN (\r

      \                'Stronghold Carrier', 'Porte-vaisseaux de forteresse',\r

      \                'Transportadora da potência', 'Носитель-база',
      'Portanaves bastión', 'Hochburg-Carrier')\r

      \            LIMIT 1\r

      \        ) AS PowerplayHasStrongholdCarrier,\r

      \        CASE \r

      \            WHEN PowerplayStateControlProgress > 12000 \r

      \                -- control lost, journal has weird number like 12271.nnn.
      Guestimate!\r

      \                THEN (PowerplayStateReinforcement -
      PowerplayStateUndermining) / 120000.0\r

      \            ELSE\r

      \                PowerplayStateControlProgress\r

      \        END AS PowerplayStateControlProgress,\r

      \        Powers,\r

      \        PowerplayStateReinforcement, \r

      \        PowerplayStateUndermining, \r

      \        PowerplayConflictProgress,\r

      \        CASE \r

      \            WHEN ControllingPower = 'Li Yong-Rui' THEN 'Reinforce'\r

      \            ELSE\r

      \                CASE\r

      \                    WHEN PowerplayState = 'Unoccupied' AND 'Li Yong-Rui'
      IN Powers THEN 'Acquire'\r

      \                    WHEN PowerplayState = 'Unoccupied' THEN 'Out of
      Range'\r

      \                    ELSE 'Undermine'\r

      \                END\r

      \        END::activity_enum AS Activity,\r

      \        timestamp as LastUpdate,\r

      \    FROM populated\r

      \    WHERE HasPowerplayData\r

      )\r

      SELECT * FROM activities\r

      WHERE Activity NOT IN ('No Powerplay Data');\r

      \r

      \r\n"
    metadata: {}
  - kind: 2
    languageId: sql
    value: "-- find infra failures.\r

      \r

      WITH infra_failures AS (\r

      \    -- 1. Find all (SystemAddress, FactionName) pairs with
      InfrastructureFailure\r

      \    SELECT DISTINCT SystemAddress, Name as FactionName, timestamp\r

      \    FROM (SELECT SystemAddress, timestamp, UNNEST(Factions,
      recursive:=true) FROM system_latest) AS f\r

      \    WHERE list_has_any(f.ActiveStates, ['InfrastructureFailure'])\r

      \    --AND timestamp >= today() - interval '1 day'\r

      ),\r

      \r

      stations AS (\r

      \    -- 2. Find stations with a market\r

      \    SELECT SystemAddress, MarketID, StationName, StarSystem,
      StationFaction.Name AS FactionName, timestamp\r

      \    FROM station_latest\r

      \    WHERE MarketId IS NOT NULL\r

      ),\r

      \r

      infra_stations AS (\r

      \    -- 2b. Only stations in systems and controlled by the faction with
      InfrastructureFailure\r

      \    SELECT s.*, i.timestamp as InfraFailTimestamp\r

      \    FROM stations s\r

      \    JOIN infra_failures i USING(SystemAddress, FactionName)\r

      ),\r

      \r

      stations_with_commodities AS (\r

      \    -- 3. Join to commodities and filter for gold or palladium in stock\r

      \    SELECT\r

      \        s.StarSystem,\r

      \        s.StationName,\r

      \        s.MarketID,\r

      \        s.FactionName,\r

      \        c.Name as Commodity,\r

      \        c.BuyPrice,\r

      \        c.Stock,\r

      \        s.InfraFailTimestamp,\r

      \        c.timestamp AS MarketTimestamp,\r

      \    FROM infra_stations s\r

      \    JOIN (select MarketId, UNNEST(commodities, recursive:=true),
      timestamp FROM commodities_latest) c\r

      \      ON s.MarketId = c.marketId\r

      \    WHERE c.Name IN ('gold', 'silver', 'palladium')\r

      \      AND c.Stock > 0\r

      ),\r

      \r

      wash_locations as (\r

      \    SELECT StarSystem, StationName, FactionName,
      array_agg([Commodity,BuyPrice::VARCHAR,Stock::VARCHAR]) as Commodities
      ,max(InfraFailTimestamp) AS InfraFailTimestamp, max(MarketTimestamp) AS
      MarketTimestamp\r

      \    FROM stations_with_commodities\r

      \    GROUP BY ALL\r

      )\r

      \r

      SELECT\r

      \    wl.StarSystem,\r

      \    wl.StationName,\r

      \    wl.FactionName,\r

      \    wl.Commodities,\r

      \    wl.InfraFailTimestamp,\r

      \    wl.MarketTimestamp,\r

      FROM wash_locations wl"
    metadata: {}
  - kind: 2
    languageId: sql
    value: ""
    metadata: {}
metadata:
  conn:
    id: c8e8a3ca7ffa39a9
    name: data.duckdb
  database: data
  schema: main
  parameters:
    ${power}:
      value: Li Yong-Rui
      type: string
