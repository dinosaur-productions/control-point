cells:
  - kind: 2
    languageId: sql
    value: "-- check a system history\r

      SELECT *\r

      from jumps_location\r

      WHERE StarSystem = 'Sceptrum'\r

      ORDER BY timestamp DESC;\r

      --DESC LIMIT 10;"
    metadata: {}
  - kind: 2
    languageId: sql
    value: "-- Read all jump and location JSON files directly. Useful to diagnose
      import issues.\r

      \r

      WITH jsn as (\r

      SELECT message->>'timestamp' ts, header->>'softwareName' softwareName,
      header->>'softwareVersion' softwareVersion, message->'ControllingPower'
      CPower, message->'PowerplayStateControlProgress' Progress, *\r

      FROM read_ndjson_auto(['data-dump/Journal.*Jump-2025-??-??.jsonl.gz',
      'data-dump/Journal.*Jump-2025-??-??.jsonl',
      'data-dump/Journal.Location-2025-??-??.jsonl.gz',
      'data-dump/Journal.Location-2025-??-??.jsonl'], union_by_name= true)\r

      )\r

      SELECT *\r

      FROM jsn\r

      WHERE message->>'StarSystem' = 'LP 410-93'\r

      --WHERE CPower != 'null' AND Progress = 'null'\r

      --WHERE message->'ControllingPower' IS NOT NULL AND
      message->'PowerplayStateControlProgress' IS NULL\r

      --WHERE header->>'softwareName' = 'EDDiscovery' limit 10; -- AND
      message->>'StarSystem' = 'Arietis Sector ON-T b3-3';\r

      \r\n"
    metadata: {}
  - kind: 2
    languageId: sql
    value: "-- Updating an enum without throwing away what is written is tricky.\r

      \r

      -- 1. back up the existing table.\r

      --CREATE TABLE bak AS SELECT * FROM fsssignaldiscovered;\r

      \r

      -- 2. drop the type and the table.\r

      --DROP TYPE fss_signal_type_enum;   \r

      --DROP TABLE fsssignaldiscovered;\r

      \r

      -- 3. Update the enum definition and run the import. This will run db.py
      and so create the new enum and table.\r

      -- It's important this comes before the next step, because otherwise the
      new table\r

      -- will keep the old enum definition, on account of being restored from
      the backup.\r

      \r

      -- 4. restore the data from the backup table\r

      -- INSERT INTO fsssignaldiscovered SELECT * FROM bak;\r

      \r

      -- 5. Drop the backup\r

      --DROP TABLE bak;\r\n"
    metadata: {}
  - kind: 2
    languageId: sql
    value: "select timestamp, StarSystem, COLUMNS('Powerplay')\r

      from jumps_location \r

      where PowerplayStateControlProgress > 2\r

      and PowerplayStateControlProgress < 1000 \r

      and \"PowerplayState\" = 'Exploited'\r

      and timestamp < '2025-09-04' \r

      order by timestamp desc;\r

      \r\n"
    metadata: {}
  - kind: 2
    languageId: sql
    value: "WITH pp as (\r

      select * EXCLUDE PowerplayConflictProgress,
      UNNEST(PowerplayConflictProgress, RECURSIVE:=true) as confprogress\r

      from jumps_location \r

      )\r

      select *\r

      from pp\r

      where \"PowerplayState\" = 'Unoccupied'\r

      and ConflictProgress > 1.20\r

      --and  \"PowerplayStateReinforcement\" > 120000\r

      --and \"PowerplayState\" = 'Exploited'\r

      and timestamp < '2025-09-04' and timestamp > '2025-09-01' \r

      order by timestamp desc\r

      limit 100;\r\n"
    metadata: {}
  - kind: 2
    languageId: sql
    value: "-- select Name, avg(SellPrice) FILTER (Demand > 0)\r

      -- from (\r

      --     select * exclude Commodities, unnest(Commodities,
      recursive:=true)\r

      --     from commodities_latest\r

      -- )\r

      -- WHERE Name in ('Rhodplumsite', 'LowTemperatureDiamond', 'Serendibite',
      'Benitoite',\r

      --     'Grandidierite', 'Tritium', 'Bromellite', 'Musgravite', 'Opal',
      'Monazite',\r

      --     'Painite', 'Platinum', 'Alexandrite')\r

      -- GROUP BY Name;\r

      \r

      select * EXCLUDE (Prohibited, Economies, CarrierDockingAccess,
      StationType)\r

      from (\r

      \    select * exclude Commodities, unnest(Commodities, recursive:=true)\r

      \    from commodities_latest\r

      )\r

      WHERE Name  in ('Rhodplumsite', 'LowTemperatureDiamond', 'Serendibite',
      'Benitoite',\r

      \    'Grandidierite', 'Tritium', 'Bromellite', 'Musgravite', 'Opal',
      'Monazite',\r

      \    'Painite', 'Platinum', 'Alexandrite')\r

      AND Demand > 5000\r

      AND SellPrice >= 200000 \r

      --LIMIT 100;\r

      \r

      --limit 100;"
    metadata: {}
metadata:
  conn:
    id: c8e8a3ca7ffa39a9
    name: data.duckdb
  database: data
  schema: main
